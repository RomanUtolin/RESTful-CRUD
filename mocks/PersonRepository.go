// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/RomanUtolin/RESTful-CRUD/internall/entity"
	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *PersonRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: req
func (_m *PersonRepository) Create(req *entity.Person) (*entity.Person, error) {
	ret := _m.Called(req)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Person) (*entity.Person, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*entity.Person) *entity.Person); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Person) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PersonRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: email, phone, firstName, page, limit
func (_m *PersonRepository) GetAll(email string, phone string, firstName string, page int, limit int) ([]*entity.Person, error) {
	ret := _m.Called(email, phone, firstName, page, limit)

	var r0 []*entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) ([]*entity.Person, error)); ok {
		return rf(email, phone, firstName, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []*entity.Person); ok {
		r0 = rf(email, phone, firstName, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(email, phone, firstName, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *PersonRepository) GetByEmail(email string) (*entity.Person, error) {
	ret := _m.Called(email)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Person, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Person); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PersonRepository) GetByID(id int) (*entity.Person, error) {
	ret := _m.Called(id)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseData provides a mock function with given fields: data
func (_m *PersonRepository) ParseData(data []byte) (*entity.Person, error) {
	ret := _m.Called(data)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*entity.Person, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) *entity.Person); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, req
func (_m *PersonRepository) Update(id int, req *entity.Person) (*entity.Person, error) {
	ret := _m.Called(id, req)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *entity.Person) (*entity.Person, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(int, *entity.Person) *entity.Person); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *entity.Person) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
