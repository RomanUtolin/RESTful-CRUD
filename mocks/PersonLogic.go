// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/RomanUtolin/RESTful-CRUD/internall/entity"
	mock "github.com/stretchr/testify/mock"
)

// PersonLogic is an autogenerated mock type for the PersonLogic type
type PersonLogic struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *PersonLogic) Create(ctx context.Context, req *entity.Person) (*entity.Person, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Person) (*entity.Person, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Person) *entity.Person); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Person) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PersonLogic) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOnePerson provides a mock function with given fields: ctx, id
func (_m *PersonLogic) GetOnePerson(ctx context.Context, id int) (*entity.Person, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Person, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Person); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersons provides a mock function with given fields: ctx, email, phone, firstName, page, limit
func (_m *PersonLogic) GetPersons(ctx context.Context, email string, phone string, firstName string, page int, limit int) ([]*entity.Person, int, int, int, error) {
	ret := _m.Called(ctx, email, phone, firstName, page, limit)

	var r0 []*entity.Person
	var r1 int
	var r2 int
	var r3 int
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) ([]*entity.Person, int, int, int, error)); ok {
		return rf(ctx, email, phone, firstName, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) []*entity.Person); ok {
		r0 = rf(ctx, email, phone, firstName, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int) int); ok {
		r1 = rf(ctx, email, phone, firstName, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, int, int) int); ok {
		r2 = rf(ctx, email, phone, firstName, page, limit)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, int, int) int); ok {
		r3 = rf(ctx, email, phone, firstName, page, limit)
	} else {
		r3 = ret.Get(3).(int)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string, string, string, int, int) error); ok {
		r4 = rf(ctx, email, phone, firstName, page, limit)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *PersonLogic) Update(ctx context.Context, id int, req *entity.Person) (*entity.Person, error) {
	ret := _m.Called(ctx, id, req)

	var r0 *entity.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.Person) (*entity.Person, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.Person) *entity.Person); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *entity.Person) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonLogic creates a new instance of PersonLogic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonLogic(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonLogic {
	mock := &PersonLogic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
